package com.springboot.cqrs.read.services.impls;import com.springboot.cqrs.read.dto.CategoryReadDTO;import com.springboot.cqrs.read.mappers.CategoryMapper;import com.springboot.cqrs.read.services.CategoryReadService;import com.springboot.cqrs.repositories.CategoryRepository;import org.springframework.data.domain.Pageable;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import java.util.List;import java.util.Optional;import java.util.stream.Collectors;@Service@Transactionalpublic class CategoryReadServiceImpl implements CategoryReadService {    private CategoryRepository categoryRepository;    private CategoryMapper categoryMapper;    public CategoryReadServiceImpl(CategoryRepository categoryRepository, CategoryMapper categoryMapper)    {        this.categoryRepository = categoryRepository;        this.categoryMapper = categoryMapper;    }    @Override    public List<CategoryReadDTO> getAll()    {        return categoryRepository.findAll()            .stream()            .map(categoryMapper::convertToReadDTO)            .collect(Collectors.toList());    }    @Override    public List<CategoryReadDTO> getAllActive()    {        return categoryRepository.findByActiveTrue()            .stream()            .map(categoryMapper::convertToReadDTO)            .collect(Collectors.toList());    }    @Override    public List<CategoryReadDTO> getPage(Pageable pageable)    {        return categoryRepository.findByActiveTrue(pageable).getContent()            .stream().map(categoryMapper::convertToReadDTO)            .collect(Collectors.toList());    }    @Override    public Optional<CategoryReadDTO> getById(Long id) {        return categoryRepository.findById(id).map(categoryMapper::convertToReadDTO);    }}