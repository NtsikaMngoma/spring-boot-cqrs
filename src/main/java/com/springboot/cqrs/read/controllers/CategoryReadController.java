package com.springboot.cqrs.read.controllers;import com.springboot.cqrs.read.dto.CategoryReadDTO;import com.springboot.cqrs.read.services.CategoryReadService;import lombok.extern.slf4j.Slf4j;import org.springframework.data.domain.Pageable;import org.springframework.http.HttpStatus;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;import java.util.Optional;@Slf4j@RestController@RequestMapping(value = "/category/read", produces = MediaType.APPLICATION_JSON_VALUE)public class CategoryReadController {    private CategoryReadService categoryReadService;    public CategoryReadController(CategoryReadService categoryReadService) {        this.categoryReadService = categoryReadService;    }    @GetMapping    public ResponseEntity<List<CategoryReadDTO>> getAll()    {        List<CategoryReadDTO> categories = categoryReadService.getAll();        return new ResponseEntity<>(categories, HttpStatus.OK);    }    @GetMapping(value = "/active")    public ResponseEntity<List<CategoryReadDTO>> getAllActive()    {        List<CategoryReadDTO> categories = categoryReadService.getAllActive();        return new ResponseEntity<>(categories, HttpStatus.OK);    }    @GetMapping(value = "/page")    public ResponseEntity<List<CategoryReadDTO>> getPage(Pageable pageable)    {        List<CategoryReadDTO> categories = categoryReadService.getPage(pageable);        return new ResponseEntity<>(categories, HttpStatus.OK);    }    @GetMapping(value = "/{id}")    public ResponseEntity<CategoryReadDTO> getById(@PathVariable Long id)    {        Optional<CategoryReadDTO> categoryOptional = categoryReadService.getById(id);        return categoryOptional            .map(category -> new ResponseEntity<>(category, HttpStatus.OK))            .orElse(new ResponseEntity<>(HttpStatus.NO_CONTENT));    }}